Not 100% complete.

This *probably* supersedes comments in the code, when the two contradict each other.

/==================\
| HARD LIMITATIONS |
\==================/

Map dimensions: 128x64

Max number of mobs per level: 254 monsters, 1 player

Max number of mob types: 255

Max number of tile types: 16 (including null)

Max tile states: 16

Longest player name: 16 chars (not counting the terminal null word)

Max number of mobs per tile: 1
Max number of items per tile: 1

/=======\
| ITEMS |
\=======/

Items will be stored in 1 word. For now, I think that the lower byte should be used for item ID, and the upper byte for the enchantment. However, I wonder whether it would be better to use 6 or 7 bits for the item ID (63 or 127 possible item types), in order to have more room for enchantments...

The current plan is that items WILL NOT be stored more than once. Item's on the ground? Great! Don't need to store that elsewhere. In inventory? Great! It lives there, always. Equipped? Again, store it once.

From a technical perspective, we COULD expand item storage, IF the map stores an index into an array. The map WILL NOT be used to store a 3rd word per tile; we're already using 16k RAM just for tile data, which is half of what's expected to be available to programs for free use!

/==========\
| MOB DATA |
\==========/

Mobs are stored in 3 words.

First word: low byte used for mob species, high byte used for mob state (a bitmask)
Second word: low byte used for HP, high byte used for MP (tentative)
Third word: low byte used for Y position, high byte used for X position

/============\
| LEVEL DATA |
\============/

This is the biggie. It currently takes up 16k of RAM. Tiles are stored in 2 words. The low word is for mob and tile type information, the high word is for what item is on the tile.

The tile word is divided into 3 sections. The lowest nybble is used for tile type. The next nybble is reserved for tile state, such as seen/not seen (which may be a bitmask, later on). The high byte stores the ID of the mob on the tile.

/===================\
| DATA ORGANIZATION |
\===================/

Most of the data occurs after the code (though not necessarily all; I think some small things like PRNG state might be intermixed with the code). Read-only content (mob definitions, etc.) occurs before variable content. We should probably offload some of that to floppy, when available. The massive tile data block (16k!) is at the end of the data block, and is followed by 0xDEADBEEFDEADBEEF.

Mem_alloc has not been used; instead, things are just reserved with DAT declarations.
